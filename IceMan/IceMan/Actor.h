#ifndef ACTOR_H_
#define ACTOR_H_

#include "GraphObject.h"
#include "StudentWorld.h"

class StudentWorld;

class Actor : public GraphObject
{
public:
	Actor(StudentWorld* world, int imageID, int startX, int startY, Direction dir, double size, int depth);
	~Actor();
	virtual void doSomething() = 0;
	//setters
	bool setisAlive(bool status);
	//getters
	StudentWorld* getWorld() const;
	bool getIsAlive();
	//methods
	void moveInDirection();
private:
	StudentWorld* m_world;
	bool m_isAlive;
};
///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////ICE//////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
class Ice : public GraphObject   //grpah object on pg 24
{
public:
	Ice(int x, int y);
	~Ice();
};


///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////ICEMAN//////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
class Iceman : public Actor
{
public:
	Iceman(StudentWorld* world);
	~Iceman();
	virtual void doSomething();
	//setters
	void gainGoldIceman();
	void gainOilIceman();
	void gainSonarIceman();
	void gainWaterIceman();

	//getters
	int getHP() const;
	int getWaterAmnt() const;
	int getSonarAmnt() const;
	int getGoldAmnt() const;
	int getOilAmnt() const;

private:
	int m_HP;
	int m_water_amnt;
	int m_sonar_amnt;
	int m_gold_amnt;
	int m_oil_amnt;
};

class Squirt : public Actor
{
public:
	Squirt(StudentWorld* world, int row, int col, Direction direction);
	~Squirt();
	virtual void doSomething();

private:
	int m_travel_distance;
};

///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////BOULDER//////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
class Boulder : public Actor
{
public:
	Boulder(StudentWorld* world, int x, int y);
	~Boulder();
	virtual void doSomething();
	enum state { stable, waiting, falling };
	void setStateBoulder(state x);
	state getStateBoulder() const;

private:
	state m_state;
	int m_BoulderTick;
};
///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////GOODIES//////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
class Goodies : public Actor  {
public:
	Goodies(StudentWorld* world, int imageID, int x, int y, Direction dir, double size, int depth, int state, int tick, int sound, char type);
	~Goodies();
	virtual void doSomething();
	enum goodieState{permanent, temporary};

	//setters
	void setItemType(char x);
	void setItemTick(int tick);
	void setItemState(int state);
	void setItemSound(int sound);
	void setItemAmnt(int amnt);

	//getters
	char getItemType();
	int getItemTick() const;
	goodieState getItemState() const;
	
	
	int getItemAmnt();
	
	int getItemSound() const;
	void decreaseTick();
private:
	goodieState goodie_state;
	int goodie_tick;
	int goodie_amnt;
	int goodie_sound;
	char goodie_type;
};
///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////GOLD//////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
class Gold : public Goodies
{
public:
	Gold(StudentWorld* world, int x, int y, int state);
	~Gold();
	//virtual void doSomething();
};
///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////OIL//////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////   pg34
class Oil : public Goodies {
public:
	Oil(StudentWorld* world, int x, int y, int state);
	~Oil();
	//virtual void doSomething();
};
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////SONAR///////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////// pg 21
class Sonar : public Goodies{
public:
	Sonar(StudentWorld *world, int x, int y, int state, int tick);
	~Sonar();
};
///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////WATER//////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
class Water : public Goodies{
public:
	Water(StudentWorld* world, int x, int y, int state, int tick);
	~Water();
};

////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////PERSON///////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

class Person : public Actor {
public:
	bool hitByBoulder();
	//TODO: implement virtual functions for abstract class
	//setters

	//getters
	int getHP() const;

private:
	int m_HP;
};
 

////////////////////////////////////////PROTESTORS//////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
class NormalProtestor : public Person
{
public:

private:

};

class HardcoreProtestor : public Person
{
public:

private:

};
//------ PROTESTORS ------

// Students:  Add code to this file, Actor.cpp, StudentWorld.h, and StudentWorld.cpp

#endif // ACTOR_H_
